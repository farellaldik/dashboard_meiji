@{
    ViewBag.ContainerClass = "container-fluid";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">

    <!-- <title>Dashboard - NiceAdmin Bootstrap Template</title> -->
    <meta content="" name="description">
    <meta content="" name="keywords">

    <!-- Favicons -->
    <link href="~/assets/img/favicon.png" rel="icon">
    <link href="~/assets/img/apple-touch-icon.png" rel="apple-touch-icon">

    <!-- Google Fonts -->
    <link href="https://fonts.gstatic.com" rel="preconnect">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Nunito:300,300i,400,400i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">

    <!-- Vendor CSS Files -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="~/assets/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="~/assets/vendor/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="~/assets/vendor/quill/quill.snow.css" rel="stylesheet">
    <link href="~/assets/vendor/quill/quill.bubble.css" rel="stylesheet">
    <link href="~/assets/vendor/remixicon/remixicon.css" rel="stylesheet">
    <link href="~/assets/vendor/simple-datatables/style.css" rel="stylesheet">

    <!-- Template Main CSS File -->
    <link href="~/assets/css/style.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

    <!-- Data Table -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css">

    <!--Swal Alert-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

</head>

<body>

    <main id="main" class="main">

        <div class="pagetitle">
            <h1>Dashboard Visit</h1>
            <nav>
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-area="" asp-controller="Dashboard" asp-action="Index">Dashboard</a></li>
                    <li class="breadcrumb-item active">Dashboard Visit</li>
                </ol>
            </nav>
        </div><!-- End Page Title -->

        <section class="section dashboard">

            <div class="row gx-2">

                <div class="col-12">
                    <div class="card info-card p-0">
                        <div class="date-filter-container mx-3">

                            @* <div class="dropdown">
                                <button class="btn btn-primary dropdown-toggle" type="button" id="multiSelectDropdown"
                                        data-bs-toggle="dropdown" aria-expanded="false">
                                    Daftar Tes
                                </button>
                                <ul class="dropdown-menu" id="dropdownMenu" aria-labelledby="multiSelectDropdown">
                                </ul>
                            </div> *@

                            <div class="date-filters">
                                <div class="form-group mb-0">
                                    <label for="visitMonth" class="card-title mt-1">Visit Month</label>
                                    <input type="month" id="visitMonth" class="form-control">
                                </div>
                                @* <div class="form-group">
                                    <label for="endDate" class="card-title">End Date</label>
                                    <input type="month" id="endDate" class="form-control">
                                </div> *@
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-3 col-md-6">
                    <div class="card info-card sales-card">

                        <!-- <div class="filter">
                          <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                          <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                            <li class="dropdown-header text-start">
                              <h6>Filter</h6>
                            </li>

                            <li><a class="dropdown-item" href="#">Today</a></li>
                            <li><a class="dropdown-item" href="#">This Month</a></li>
                            <li><a class="dropdown-item" href="#">This Year</a></li>
                          </ul>
                        </div> -->

                        <div class="card-body">
                            <h5 class="card-title">Target Visit Bulanan</h5>

                            <div class="d-flex align-items-center">
                                <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                                    <i class="bi bi-calendar"></i>
                                </div>
                                <div class="pl-3 w-100">
                                    <h6 id="visit-count">0 / 0 Dokter</h6>

                                    <!-- Bagian ini akan diubah sesuai dengan needToVisit atau achievementRate -->
                                    <span id="visit-target" class="text-success small mt-3 pt-3 font-weight-bold">0 visit</span>

                                    <!-- Progress bar akan di-update sesuai achievementRate -->
                                    <div class="progress mt-2">
                                        <div id="progress-bar-target" class="progress-bar" role="progressbar" style="width: 50%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

                <div class="col-lg-3 col-md-6">
                    <div class="card info-card sales-card">

                        <!-- <div class="filter">
                          <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                          <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                            <li class="dropdown-header text-start">
                              <h6>Filter</h6>
                            </li>

                            <li><a class="dropdown-item" href="#">Today</a></li>
                            <li><a class="dropdown-item" href="#">This Month</a></li>
                            <li><a class="dropdown-item" href="#">This Year</a></li>
                          </ul>
                        </div> -->

                        <div class="card-body">
                            <h5 class="card-title">Target Coverage Dokter</h5>

                            <div class="d-flex align-items-center">
                                <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                                    <i class="bi bi-pie-chart"></i>
                                </div>
                                <div class="pl-3 w-100">
                                    <h6 id="visit-coverage">0 / 0 Dokter</h6>

                                    <!-- Bagian ini akan diubah sesuai dengan needToVisit atau achievementRate -->
                                    <span id="visit-coverage-target" class="text-success small mt-3 pt-3 font-weight-bold">0 coverage</span>

                                    <!-- Progress bar akan di-update sesuai achievementRate -->
                                    <div class="progress mt-2">
                                        <div id="progess-bar-coverage" class="progress-bar" role="progressbar" style="width: 50%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>

                                </div>
                            </div>
                        </div>

                    </div>
                </div>

                <div class="col-lg-2 col-md-4">
                    <div class="card info-card sales-card">

                        <!-- <div class="filter">
                          <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                          <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                            <li class="dropdown-header text-start">
                              <h6>Filter</h6>
                            </li>

                            <li><a class="dropdown-item" href="#">Today</a></li>
                            <li><a class="dropdown-item" href="#">This Month</a></li>
                            <li><a class="dropdown-item" href="#">This Year</a></li>
                          </ul>
                        </div> -->

                        <div class="card-body">
                            <h5 class="card-title">Target Visit Dokter Kelas A</h5>

                            <div class="d-flex align-items-center">
                                <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                                    <i class="bi bi-person"></i>
                                </div>
                                <div class="pl-3 w-100">
                                    <h6 id="visit-count-a">0 / 0</h6>

                                    <span id="visit-target-a" class="text-success small mt-3 pt-3 font-weight-bold">0 visit lagi</span>

                                    <div class="progress mt-2">
                                        <div id="progess-bar-target-a" class="progress-bar" role="progressbar" style="width: 50%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

                <div class="col-lg-2 col-md-4">
                    <div class="card info-card sales-card">

                        <!-- <div class="filter">
                          <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                          <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                            <li class="dropdown-header text-start">
                              <h6>Filter</h6>
                            </li>

                            <li><a class="dropdown-item" href="#">Today</a></li>
                            <li><a class="dropdown-item" href="#">This Month</a></li>
                            <li><a class="dropdown-item" href="#">This Year</a></li>
                          </ul>
                        </div> -->

                        <div class="card-body">
                            <h5 class="card-title">Target Visit Dokter Kelas B</h5>

                            <div class="d-flex align-items-center">
                                <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                                    <i class="bi bi-person"></i>
                                </div>
                                <div class="pl-3 w-100">
                                    <h6 id="visit-count-b">0 / 0</h6>

                                    <span id="visit-target-b" class="text-success small mt-3 pt-3 font-weight-bold">0 visit lagi</span>

                                    <div class="progress mt-2">
                                        <div id="progess-bar-target-b" class="progress-bar" role="progressbar" style="width: 50%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

                <div class="col-lg-2 col-md-4">
                    <div class="card info-card sales-card">

                        <!-- <div class="filter">
                          <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                          <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                            <li class="dropdown-header text-start">
                              <h6>Filter</h6>
                            </li>

                            <li><a class="dropdown-item" href="#">Today</a></li>
                            <li><a class="dropdown-item" href="#">This Month</a></li>
                            <li><a class="dropdown-item" href="#">This Year</a></li>
                          </ul>
                        </div> -->

                        <div class="card-body">
                            <h5 class="card-title">Target Visit Dokter Kelas C</h5>

                            <div class="d-flex align-items-center">
                                <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                                    <i class="bi bi-person"></i>
                                </div>
                                <div class="pl-3 w-100">
                                    <h6 id="visit-count-c">0 / 0</h6>

                                    <span id="visit-target-c" class="text-success small mt-3 pt-3 font-weight-bold">0 visit lagi</span>

                                    <div class="progress mt-2">
                                        <div id="progess-bar-target-c" class="progress-bar" role="progressbar" style="width: 50%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

                <div class="col-xxl-6 col-md-6 col-lg-6">
                    <!-- Visit -->
                    <div class="card info-card">
                        @* <div class="filter">
                          <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                          <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                            <li class="dropdown-header text-start">
                              <h6>OPSI CHART</h6>
                            </li>

                            <li><a class="dropdown-item" href="#">Per Hari</a></li>
                            <li><a class="dropdown-item" href="#">Per Bulan</a></li>
                          </ul>
                        </div> *@

                        <div class="card-body pb-0">
                            <h5 class="card-title">Visit Berdasarkan Produk</h5>

                            <!-- Column Chart -->
                            <div id="ChartVisitProduct" style="height: 280px"></div>
                            <!-- End Column Chart -->

                        </div>
                    </div><!-- End Visit -->
                </div>

                <div class="col-xxl-3 col-md-3 col-lg-3">
                    <!-- Actual Sales -->
                    <div class="card info-card">
                        <!-- <div class="filter">
                          <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                          <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                            <li class="dropdown-header text-start">
                              <h6>Filter</h6>
                            </li>

                            <li><a class="dropdown-item" href="#">Today</a></li>
                            <li><a class="dropdown-item" href="#">This Month</a></li>
                            <li><a class="dropdown-item" href="#">This Year</a></li>
                          </ul>
                        </div> -->

                        <div class="card-body pb-0">
                            <h5 class="card-title">Visit By Plan | Monthly</h5>

                            <div id="PieChartVisitPlan" style="height: 295px;" class="echart"></div>

                        </div>
                    </div><!-- End Actual Sales -->
                </div>

                <div class="col-xxl-3 col-md-3 col-lg-3">
                    <!-- Actual Sales -->
                    <div class="card info-card">
                        <!-- <div class="filter">
                          <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                          <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                            <li class="dropdown-header text-start">
                              <h6>Filter</h6>
                            </li>

                            <li><a class="dropdown-item" href="#">Today</a></li>
                            <li><a class="dropdown-item" href="#">This Month</a></li>
                            <li><a class="dropdown-item" href="#">This Year</a></li>
                          </ul>
                        </div> -->

                        <div class="card-body pb-0">
                            <h5 class="card-title">Visit By Class | Monthly</h5>

                            <div id="PieChartDoctorClass" style="height: 295px;" class="echart"></div>

                        </div>
                    </div><!-- End Actual Sales -->
                </div>

                <div class="col-xxl-6 col-md-6 col-lg-6">
                    <!-- Website Traffic -->
                    <div class="card info-card">
                        <!-- <div class="filter">
                          <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                          <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                            <li class="dropdown-header text-start">
                              <h6>Filter</h6>
                            </li>

                            <li><a class="dropdown-item" href="#">Today</a></li>
                            <li><a class="dropdown-item" href="#">This Month</a></li>
                            <li><a class="dropdown-item" href="#">This Year</a></li>
                          </ul>
                        </div> -->

                        <div class="card-body pb-0">
                            <h5 class="card-title">Visit By Class | Daily </h5>

                            <div id="VisitByClassDaily" style="height: 280px;" class="echart mb-0"></div>

                        </div>
                    </div>
                    <!-- End Website Traffic -->

                </div>

                <div class="col-xxl-6 col-md-6 col-lg-6">
                    <!-- Visit -->
                    <div class="card info-card">
                        <!-- <div class="filter">
                          <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                          <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                            <li class="dropdown-header text-start">
                              <h6>Filter</h6>
                            </li>

                            <li><a class="dropdown-item" href="#">Today</a></li>
                            <li><a class="dropdown-item" href="#">This Month</a></li>
                            <li><a class="dropdown-item" href="#">This Year</a></li>
                          </ul>
                        </div> -->

                        <div class="card-body pb-0">
                            <h5 class="card-title">Visit By Plan | Daily</h5>

                            <!-- Column Chart -->
                            <a><div id="VisitByPlanDaily" style="height: 280px;"></div></a>
                            <!-- End Column Chart -->

                        </div>
                    </div><!-- End Visit -->
                </div>

                <!-- Card Table -->
                <div class="col-12">
                    <div class="card top-selling overflow-auto">
                        <div class="card-body d-flex gap-3 p-3">
                            <!-- Mengatur gap menggunakan kelas gap -->
                            <button type="button" id="button-all" class="btn btn-outline-primary flex-fill">All</button>
                            <button type="button" id="button-completed" class="btn btn-outline-primary flex-fill">Completed</button>
                            <button type="button" id="button-progress" class="btn btn-outline-primary flex-fill">Progress</button>
                            <button type="button" id="button-unvisited" class="btn btn-outline-primary flex-fill">Univisited</button>
                            <button type="button" id="button-history" class="btn btn-outline-primary flex-fill">Visit History</button>
                            <button type="button" id="button-insight" class="btn btn-outline-primary flex-fill">Insight</button>
                        </div>
                    </div>
                </div>
                <!-- End Card Table -->

                <!-- Card Table -->
                <div class="col-12">
                    <div id="card-all" style="display:none;" class="card top-selling overflow-auto pb-4">
                        <div class="card-body pb-0">
                            <h5 class="card-title">All Visit Data By Doctor</h5>
                            <table id="TableAllDoctor" class="display">
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th>Doctor Code</th>
                                        <th>Doctor Name</th>
                                        <th>Class</th>
                                        <th>Visit Target</th>
                                        <th>Planned Visit</th>
                                        <th>Unplanned Visit</th>
                                        <th>Visited</th>
                                        <th>Progress</th>
                                        <th>Remarks</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Baris data akan diisi dengan JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <!-- End Card Table -->

                <!-- Card Table -->
                <div class="col-12">
                    <div id="card-completed" style="display:none;" class="card top-selling overflow-auto pb-4">
                        <div class="card-body pb-0">
                            <h5 class="card-title">Target Visit Completed</h5>
                            <table id="TableCompletedDoctor" class="display">
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th>Doctor Code</th>
                                        <th>Doctor Name</th>
                                        <th>Class</th>
                                        <th>Visit Target</th>
                                        <th>Planned Visit</th>
                                        <th>Unplanned Visit</th>
                                        <th>Visited</th>
                                        <th>Progress</th>
                                        <th>Remarks</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Baris data akan diisi dengan JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <!-- End Card Table -->

                <!-- Card Table -->
                <div class="col-12">
                    <div id="card-progress" style="display:none;" class="card top-selling overflow-auto pb-4">
                        <div class="card-body pb-0">
                            <h5 class="card-title">Target Visit Progressed</h5>
                            <table id="TableProgressDoctor" class="display">
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th>Doctor Code</th>
                                        <th>Doctor Name</th>
                                        <th>Class</th>
                                        <th>Visit Target</th>
                                        <th>Planned Visit</th>
                                        <th>Unplanned Visit</th>
                                        <th>Visited</th>
                                        <th>Progress</th>
                                        <th>Remarks</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Baris data akan diisi dengan JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <!-- End Card Table -->

                <!-- Card Table -->
                <div class="col-12">
                    <div id="card-unvisited" style="display:none;" class="card top-selling overflow-auto pb-4">
                        <div class="card-body pb-0">
                            <h5 class="card-title">Not Visited Yet</h5>
                            <table id="TableUnvisitedDoctor" class="display">
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th>Doctor Code</th>
                                        <th>Doctor Name</th>
                                        <th>Class</th>
                                        <th>Visit Target</th>
                                        <th>Planned Visit</th>
                                        <th>Unplanned Visit</th>
                                        <th>Visited</th>
                                        <th>Progress</th>
                                        <th>Remarks</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Baris data akan diisi dengan JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <!-- End Card Table -->

                <!-- Card Table -->
                <div class="col-12">
                    <div id="card-history" style="display:none;" class="card top-selling overflow-auto pb-4">
                        <div class="card-body pb-0">
                            <h5 class="card-title">Visit History By Date</h5>
                            <table id="visitHistoryDataTable" class="display">
                                <thead class="w-100">
                                    <tr>
                                        <th>Date</th>
                                        <th>Time</th>
                                        <th>ID Doctor</th>
                                        <th>Name</th>
                                        <th>Class</th>
                                        <th>Product ID</th>
                                        <th>Product</th>
                                        <th>Visit Quality</th>
                                        <th>Notes</th>
                                        <th>Practice</th>
                                        <th>Address</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Baris data akan diisi dengan JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <!-- End Card Table -->

            </div>

        </section>

    </main><!-- End #main -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>

    <!-- Vendor JS Files -->
    <script src="~/assets/vendor/apexcharts/apexcharts.min.js"></script>
    <script src="~/assets/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="~/assets/vendor/chart.js/chart.umd.js"></script>
    <script src="~/assets/vendor/echarts/echarts.min.js"></script>
    <script src="~/assets/vendor/quill/quill.js"></script>
    <script src="~/assets/vendor/simple-datatables/simple-datatables.js"></script>
    <script src="~/assets/vendor/tinymce/tinymce.min.js"></script>
    <script src="~/assets/vendor/php-email-form/validate.js"></script>

    <!-- JS Data Table -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>

    <!-- Template Main JS File -->
    @* <script src="~/assets/js/main.js"></script> *@
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.js"></script>
    <script src="https://cdn.datatables.net/2.1.7/js/dataTables.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>

    <script>

        $(document).ready(function () {

            const visitMonthInput = document.getElementById('visitMonth');

            setDefaultDates();

            $(document).on('dropdownChanged', function (event, selectedValue) {
                updateDataVisit(selectedValue);
            });

            var savedSelection = sessionStorage.getItem('dropdownSelection')
            if (savedSelection) {
                updateDataVisit(savedSelection);
            }

            function setDefaultDates() {
                const today = new Date();
                const visitMonth = new Date(today.getFullYear(), today.getMonth() + 1);

                const visitMonthFormatted = visitMonth.toISOString().slice(0, 7); // Ambil hanya YYYY-MM

                visitMonthInput.value = visitMonthFormatted;

                console.log(visitMonthInput.value)

            }

            function updateDataVisit(employeeNik) {

                Swal.fire({
                    title: 'Loading...',
                    text: 'Mohon tunggu data sedang diambil...',
                    allowOutsideClick: false, // Cegah user menutup alert
                    showConfirmButton: false, // Hilangkan tombol OK
                    backdrop: false, // Menonaktifkan backdrop untuk memungkinkan scrolling
                    didOpen: () => {
                        Swal.showLoading(); // Tampilkan loading animation
                    }
                });

                const [year, month] = visitMonthInput.value.split('-').map(Number);

                $.ajax({
                    url: '@Url.Action("DashboardVisit", "Dashboard")',
                    type: 'GET',
                    dataType: 'json',
                    data: { employeeNik: employeeNik, year: year, month: month },
                    success: function (data) {

                        Swal.close();

                        //Update Data Card Target Visit Bulanan
                        const visitTargetData = data.visitTarget[0]; // Ambil data pertama dari array visitTarget
                        const visitTarget = visitTargetData.visitTarget;
                        const visitCount = visitTargetData.visitCount;
                        const achievementRate = visitTargetData.achievementRate;
                        const needToVisit = visitTargetData.needToVisit;
                        // Update <h6> menjadi visitCount / visitTarget
                        $('#visit-count').text(visitCount + ' / ' + visitTarget);
                        // Update text jumlah visit yang dibutuhkan
                        if (achievementRate >= 100) {
                            $('#visit-target').html('Luar Biasa!</span> <span class="pt-2 pl-1">Achieved</span>');
                        } else {
                            $('#visit-target').html(needToVisit + ' visit</span><span class="pt-2 pl-1">lagi mencapai target!</span>');
                        }
                        // Update progress bar berdasarkan achievementRate
                        $('#progress-bar-target').css('width', achievementRate + '%');
                        // Jika achievementRate >= 100, tambahkan teks khusus
                        if (achievementRate >= 100) {
                            $('#progress-bar-target').attr('aria-valuenow', 100); // Set max ke 100
                        } else {
                            $('#progress-bar-target').attr('aria-valuenow', achievementRate); // Set nilai saat ini ke achievementRate
                        }

                        //Update Data Card Coverage MCL Bulanan
                        const visitCoverageData = data.visitCoverage[0]; // Ambil data pertama dari array visitTarget
                        const mcl = visitCoverageData?.mcl ?? 0;
                        const visited = visitCoverageData?.visited ?? 0;
                        const coverage = visitCoverageData?.coverage ?? 0;
                        const needToVisitCoverage = visitCoverageData?.needToVisit ?? 0;
                        // Update <h6> menjadi visitCount / visitTarget
                        $('#visit-coverage').text(visited + ' / ' + mcl);
                        // Update text jumlah visit yang dibutuhkan
                        if (coverage >= 100) {
                            $('#visit-coverage-target').html('Luar Biasa!</span> <span class="pt-2 pl-1">Achieved</span>');
                        } else {
                            $('#visit-coverage-target').html(needToVisitCoverage + ' visit</span><span class="pt-2 pl-1">lagi mencapai target!</span>');
                        }
                        // Update progress bar berdasarkan achievementRate
                        $('#progess-bar-coverage').css('width', coverage + '%');
                        // Jika achievementRate >= 100, tambahkan teks khusus
                        if (coverage >= 100) {
                            $('#progress-bar-coverage').attr('aria-valuenow', 100); // Set max ke 100
                        } else {
                            $('#progress-bar-coverage').attr('aria-valuenow', coverage); // Set nilai saat ini ke achievementRate
                        }

                        //Update Data Card Target Visit Dokter Class A
                        const visitTargetByClass_a = data.visitTargetByClass[0]; // Ambil data pertama dari array visitTarget
                        const doctorCount_a = visitTargetByClass_a?.doctorCount ?? 0;
                        const targetVisit_a = visitTargetByClass_a?.targetVisit ?? 0;
                        const visited_a = visitTargetByClass_a?.visited ?? 0;
                        const needToVisit_a = visitTargetByClass_a?.needToVisit ?? 0;
                        const progress_a = visitTargetByClass_a?.progress ?? 0;
                        // Update <h6> menjadi visitCount / visitTarget
                        $('#visit-count-a').text(visited_a + ' / ' + targetVisit_a);
                        // Update text jumlah visit yang dibutuhkan
                        if (progress_a >= 100) {
                            $('#visit-target-a').html('</span><span class="pt-2 pl-1">Achieved</span>');
                        } else {
                            $('#visit-target-a').html(needToVisit_a + ' visit</span><span class="pt-2 pl-1">lagi</span>');
                        }
                        // Update progress bar berdasarkan achievementRate
                        $('#progess-bar-target-a').css('width', progress_a + '%');
                        // Jika achievementRate >= 100, tambahkan teks khusus
                        if (progress_a >= 100) {
                            $('#progess-bar-target-a').attr('aria-valuenow', 100); // Set max ke 100
                        } else {
                            $('#progess-bar-target-a').attr('aria-valuenow', progress_a); // Set nilai saat ini ke achievementRate
                        }

                        //Update Data Card Target Visit Dokter Class B
                        const visitTargetByClass_b = data.visitTargetByClass[1]; // Ambil data pertama dari array visitTarget
                        const doctorCount_b = visitTargetByClass_b?.doctorCount ?? 0;
                        const targetVisit_b = visitTargetByClass_b?.targetVisit ?? 0;
                        const visited_b = visitTargetByClass_b?.visited ?? 0;
                        const needToVisit_b = visitTargetByClass_b?.needToVisit ?? 0;
                        const progress_b = visitTargetByClass_b?.progress ?? 0;
                        // Update <h6> menjadi visitCount / visitTarget
                        $('#visit-count-b').text(visited_b + ' / ' + targetVisit_b);
                        // Update text jumlah visit yang dibutuhkan
                        if (progress_b >= 100) {
                            $('#visit-target-b').html('</span><span class="pt-2 pl-1">Achieved</span>');
                        } else {
                            $('#visit-target-b').html(needToVisit_b + ' visit</span><span class="pt-2 pl-1">lagi</span>');
                        }
                        // Update progress bar berdasarkan achievementRate
                        $('#progess-bar-target-b').css('width', progress_b + '%');
                        // Jika achievementRate >= 100, tambahkan teks khusus
                        if (progress_b >= 100) {
                            $('#progess-bar-target-b').attr('aria-valuenow', 100); // Set max ke 100
                        } else {
                            $('#progess-bar-target-b').attr('aria-valuenow', progress_b); // Set nilai saat ini ke achievementRate
                        }

                        //Update Data Card Target Visit Dokter Class C
                        const visitTargetByClass_c = data.visitTargetByClass[2]; // Ambil data pertama dari array visitTarget
                        const doctorCount_c = visitTargetByClass_c?.doctorCount ?? 0;
                        const targetVisit_c = visitTargetByClass_c?.targetVisit ?? 0;
                        const visited_c = visitTargetByClass_c?.visited ?? 0;
                        const needToVisit_c = visitTargetByClass_c?.needToVisit ?? 0;
                        const progress_c = visitTargetByClass_c?.progress ?? 0;
                        // Update <h6> menjadi visitCount / visitTarget
                        $('#visit-count-c').text(visited_c + ' / ' + targetVisit_c);
                        // Update text jumlah visit yang dibutuhkan
                        if (progress_c >= 100) {
                            $('#visit-target-c').html('</span><span class="pt-2 pl-1">Achieved</span>');
                        } else {
                            $('#visit-target-c').html(needToVisit_c + ' visit</span><span class="pt-2 pl-1">lagi</span>');
                        }
                        // Update progress bar berdasarkan achievementRate
                        $('#progess-bar-target-c').css('width', progress_c + '%');
                        // Jika achievementRate >= 100, tambahkan teks khusus
                        if (progress_c >= 100) {
                            $('#progess-bar-target-c').attr('aria-valuenow', 100); // Set max ke 100
                        } else {
                            $('#progess-bar-target-c').attr('aria-valuenow', progress_c); // Set nilai saat ini ke achievementRate
                        }

                        //Update Data Chart Visit By Product
                        const countProductsById = (data) => {
                            const productCounts = {};

                            data.forEach(item => {
                                const prodId = item.prodId; // Ambil prodId
                                productCounts[prodId] = (productCounts[prodId] || 0) + 1; // Hitung jumlah produk
                            });

                            return Object.keys(productCounts).map(prodId => ({
                                prodId,
                                count: productCounts[prodId]
                            }));
                        };

                        const ChartVisitProduct = document.querySelector("#ChartVisitProduct");
                        const visitChartTableData = data.visitChartTableData;
                        const chartDataProduct = countProductsById(visitChartTableData);
                        const newSeriesData = chartDataProduct.map(data => data.count);
                        const newCategories = chartDataProduct.map(data => data.prodId);

                        // Inisialisasi chart
                        var chart = new ApexCharts(ChartVisitProduct, {
                            series: [{
                                name: 'Jumlah Produk',
                                data: [] // Data jumlah produk
                            }],
                            chart: {
                                type: 'bar',
                                height: 280,
                                stacked: false
                            },
                            plotOptions: {
                                bar: {
                                    horizontal: false,
                                    columnWidth: '55%',
                                    endingShape: 'rounded'
                                },
                            },
                            dataLabels: {
                                enabled: true,
                            },
                            stroke: {
                                show: true,
                                width: 2,
                                colors: ['transparent']
                            },
                            xaxis: {
                                categories: [] // Menggunakan prodId sebagai kategori
                            },
                            yaxis: {
                                title: {
                                    text: 'Jumlah'
                                }
                            },
                            colors: ['#28a745'],
                            fill: {
                                opacity: 1,
                                colors: ['#28a745']
                            },
                            tooltip: {
                                y: {
                                    formatter: function (val) {
                                        return val + " Kunjungan"
                                    }
                                }
                            }
                        });

                        // Render chart
                        chart.render();

                        // Update series dan options
                        chart.updateSeries([{
                            name: 'Jumlah Produk',
                            data: newSeriesData
                        }]);

                        chart.updateOptions({
                            xaxis: {
                                categories: newCategories,
                            }
                        });

                        //Update Data Chart Visit By Plan
                        const countPlanUnplan = (data) => {
                            let plannedCount = 0;
                            let unplannedCount = 0;

                            data.forEach(item => {
                                if (item.planVisit === "1") {
                                    plannedCount++; // Jika planVisit 1, hitung sebagai Planned
                                } else if (item.planVisit === "0") {
                                    unplannedCount++; // Jika planVisit 0, hitung sebagai Unplanned
                                }
                            });

                            return {
                                planned: plannedCount,
                                unplanned: unplannedCount
                            };
                        };

                        const PieChartVisitPlanData = countPlanUnplan(visitChartTableData);
                        const PieChartVisitPlan = document.querySelector("#PieChartVisitPlan");

                        const pieData = [
                            { value: PieChartVisitPlanData.planned, name: 'Planned', itemStyle: { color: '#88bc6c' } },  // warna hijau
                            { value: PieChartVisitPlanData.unplanned, name: 'Unplanned', itemStyle: { color: '#FF4560' } }  // warna merah
                        ];

                        const totalPie = pieData.reduce((sum, item) => sum + item.value, 0);

                        echarts.init(PieChartVisitPlan).setOption({
                            tooltip: {
                                trigger: 'item',
                                formatter: function (params) {
                                    let percent = (params.value / totalPie * 100).toFixed(2);
                                    return `${params.name}: ${params.value} (${percent}%)`;
                                }
                            },
                            legend: {
                                top: '0%',
                                left: 'center'
                            },
                            series: [{
                                name: 'Status Kunjungan',
                                type: 'pie',
                                radius: ['40%', '70%'],
                                avoidLabelOverlap: false,
                                label: {
                                    show: false,
                                    position: 'center',
                                },
                                emphasis: {
                                    label: {
                                        show: true,
                                        fontSize: '18',
                                        fontWeight: 'bold'
                                    }
                                },
                                labelLine: {
                                    show: false
                                },
                                data: pieData
                            }]
                        });;

                        //Update Data Chart Visit By Doctor Class
                        const countByDoctorClass = (data) => {
                            let DoctorClassA = 0;
                            let DoctorClassB = 0;
                            let DoctorClassC = 0;

                            data.forEach(item => {
                                if (item.doctorClass === "A") {
                                    DoctorClassA++; 
                                } else if (item.doctorClass === "B") {
                                    DoctorClassB++;
                                } else if (item.doctorClass === "C") {
                                    DoctorClassC++;
                                }
                            });

                            return {
                                DoctorClassA: DoctorClassA,
                                DoctorClassB: DoctorClassB,
                                DoctorClassC: DoctorClassC
                            };
                        };

                        const PieChartVisitByDoctorClassData = countByDoctorClass(visitChartTableData);
                        const PieChartDoctorClass = document.querySelector("#PieChartDoctorClass");

                        const pieData2 = [
                            { value: PieChartVisitByDoctorClassData.DoctorClassA, name: 'Class A', color : '#008FFB'},
                            { value: PieChartVisitByDoctorClassData.DoctorClassB, name: 'Class B', color : '#00E396'},
                            { value: PieChartVisitByDoctorClassData.DoctorClassC, name: 'Class C', color : '#FEB019' }
                        ];

                        const totalPie2 = pieData2.reduce((sum, item) => sum + item.value, 0);

                        echarts.init(PieChartDoctorClass).setOption({
                            tooltip: {
                                trigger: 'item',
                                formatter: function (params) {
                                    let percent = (params.value / totalPie2 * 100).toFixed(2);
                                    return `${params.name}: ${params.value} (${percent}%)`;
                                }
                            },
                            legend: {
                                top: '0%',
                                left: 'center'
                            },
                            series: [{
                                name: 'Status Kunjungan',
                                type: 'pie',
                                radius: ['40%', '70%'],
                                avoidLabelOverlap: false,
                                label: {
                                    show: false,
                                    position: 'center',
                                },
                                emphasis: {
                                    label: {
                                        show: true,
                                        fontSize: '18',
                                        fontWeight: 'bold'
                                    }
                                },
                                labelLine: {
                                    show: false
                                },
                                data: pieData2
                            }]
                        });;

                        //Update Data Chart Visit By Class Daily
                        const countByDoctorClassDaily = (data) => {
                            const result = {};

                            data.forEach(visit => {
                                const adate = visit.adate;
                                const doctorClass = visit.doctorClass;

                                // Jika tanggal belum ada di result, tambahkan
                                if (!result[adate]) {
                                    result[adate] = {
                                        visitCountA: 0,
                                        visitCountB: 0,
                                        visitCountC: 0
                                    };
                                }

                                // Tambahkan jumlah visit berdasarkan doctorClass
                                if (doctorClass === 'A') {
                                    result[adate].visitCountA += 1;
                                } else if (doctorClass === 'B') {
                                    result[adate].visitCountB += 1;
                                } else if (doctorClass === 'C') {
                                    result[adate].visitCountC += 1;
                                }
                            });

                            return result;
                        };

                        const PieChartVisitByDoctorClassDataDaily = countByDoctorClassDaily(visitChartTableData);
                        const VisitByClassDaily = document.querySelector("#VisitByClassDaily");

                        // Siapkan data untuk update chart
                        const VisitDay = Object.keys(PieChartVisitByDoctorClassDataDaily); // Mengambil tanggal sebagai kategori (xAxis)
                        const visitCountAData = Object.values(PieChartVisitByDoctorClassDataDaily).map(data => data.visitCountA);
                        const visitCountBData = Object.values(PieChartVisitByDoctorClassDataDaily).map(data => data.visitCountB);
                        const visitCountCData = Object.values(PieChartVisitByDoctorClassDataDaily).map(data => data.visitCountC);

                        // Inisialisasi chart dengan data kosong
                        var chart1 = new ApexCharts(VisitByClassDaily, {
                            series: [], // Data awal kosong
                            chart: {
                                type: 'bar',
                                height: 280,
                                stacked: true
                            },
                            plotOptions: {
                                bar: {
                                    horizontal: false,
                                    columnWidth: '55%',
                                    endingShape: 'rounded'
                                },
                            },
                            dataLabels: {
                                enabled: true,
                            },
                            stroke: {
                                show: true,
                                width: 2,
                                colors: ['transparent']
                            },
                            xaxis: {
                                categories: [] // Kategori awal kosong
                            },
                            yaxis: {
                                title: {
                                    text: 'Jumlah Kunjungan'
                                }
                            },
                            fill: {
                                opacity: 1
                            },
                            tooltip: {
                                y: {
                                    formatter: function (val) {
                                        return val + " Kunjungan";
                                    }
                                }
                            }
                        });

                        // Render chart dengan data kosong
                        chart1.render();

                        // Update series dan options setelah chart dirender
                        chart1.updateSeries([
                            {
                                name: 'Visit Class A',
                                data: visitCountAData // Data jumlah kunjungan doctorClass A
                            },
                            {
                                name: 'Visit Class B',
                                data: visitCountBData // Data jumlah kunjungan doctorClass B
                            },
                            {
                                name: 'Visit Class C',
                                data: visitCountCData // Data jumlah kunjungan doctorClass C
                            }
                        ]);

                        chart1.updateOptions({
                            xaxis: {
                                categories: VisitDay // Menggunakan adate sebagai kategori (xAxis)
                            }
                        });

                        //Update Chart Visit By Plan Daily
                        const countPlannedUnplannedDaily = (data) => {
                            const result = {};

                            data.forEach(visit => {
                                const adate = visit.adate;
                                const planVisit = visit.planVisit;

                                // Jika tanggal belum ada di result, tambahkan
                                if (!result[adate]) {
                                    result[adate] = {
                                        Visitplanned: 0,
                                        Visitunplanned: 0
                                    };
                                }

                                // Tambahkan jumlah visit berdasarkan planVisit
                                if (planVisit === '1') {
                                    result[adate].Visitplanned += 1;
                                } else if (planVisit === '0') {
                                    result[adate].Visitunplanned += 1;
                                }
                            });

                            return result;
                        };

                        const ChartVisitByPlanDaily = countPlannedUnplannedDaily(visitChartTableData);
                        const VisitByPlanDaily = document.querySelector("#VisitByPlanDaily");

                        // Siapkan data untuk update chart
                        const VisitDoctorDay = Object.keys(ChartVisitByPlanDaily); // Mengambil tanggal sebagai kategori (xAxis)
                        const visitPlanned = Object.values(ChartVisitByPlanDaily).map(data => data.Visitplanned);
                        const visitUnplanned = Object.values(ChartVisitByPlanDaily).map(data => data.Visitunplanned);

                        // Inisialisasi chart dengan data kosong
                        var chart2 = new ApexCharts(VisitByPlanDaily, {
                            series: [], // Data awal kosong
                            chart: {
                                type: 'bar',
                                height: 280,
                                stacked: true
                            },
                            plotOptions: {
                                bar: {
                                    horizontal: false,
                                    columnWidth: '55%',
                                    endingShape: 'rounded'
                                },
                            },
                            dataLabels: {
                                enabled: true,
                            },
                            stroke: {
                                show: true,
                                width: 2,
                                colors: ['transparent']
                            },
                            xaxis: {
                                categories: [] // Kategori awal kosong
                            },
                            yaxis: {
                                title: {
                                    text: 'Jumlah Kunjungan'
                                }
                            },
                            colors: ['#88BC6C', '#FF4560'],
                            fill: {
                                opacity: 1
                            },
                            tooltip: {
                                y: {
                                    formatter: function (val) {
                                        return val + " Kunjungan";
                                    }
                                }
                            }
                        });

                        // Render chart dengan data kosong
                        chart2.render();

                        // Update series dan options setelah chart dirender
                        chart2.updateSeries([
                            {
                                name: 'Planned Visit',
                                data: visitPlanned // Data jumlah kunjungan doctorClass A
                            },
                            {
                                name: 'Unplanned Visit',
                                data: visitUnplanned // Data jumlah kunjungan doctorClass C
                            }
                        ]);

                        chart2.updateOptions({
                            xaxis: {
                                categories: VisitDoctorDay // Menggunakan adate sebagai kategori (xAxis)
                            }
                        });

                        const dataTableVisitHistory = $('#visitHistoryDataTable');

                        // Update DataTable
                        if ($.fn.DataTable.isDataTable('#visitHistoryDataTable')) {
                            dataTableVisitHistory.DataTable().clear().destroy();
                        }

                        dataTableVisitHistory.DataTable({
                            data: visitChartTableData,
                            columns: [
                                { data: 'adate'},
                                { data: 'timeCall'},
                                { data: 'doctorCode'},
                                { data: 'doctorName'},
                                { data: 'doctorClass'},
                                { data: 'prodId'},
                                { data: 'prodDesc'},
                                {
                                    data: 'visitQuality',
                                    render: function (data, type, row) {
                                        // Ubah visitQuality menjadi label sesuai dengan nilainya
                                        if (data == 3) {
                                            return 'C - Greeting Only';
                                        } else if (data == 4) {
                                            return 'B - Chatting';
                                        } else if (data == 5) {
                                            return 'A - Prescription Req, Intro Prod ';
                                        } else {
                                            return data; // Jika nilai tidak sesuai, tampilkan angka asli
                                        }
                                    }
                                },
                                { data: 'anotes'},
                                { data: 'practiceName'},
                                { data: 'address'}
                            ],
                            autoWidth: false, // Matikan autoWidth jika ingin kontrol penuh
                            scrollX: true, // Mengaktifkan scroll horizontal jika tabel lebih lebar dari kontainer
                            paging: true,
                            searching: true,
                            ordering: true,
                            order: [[0, 'desc']]
                        });


                        // Mengelompokkan data
                        const doctors = data.mclTableData.map(doctor => {
                            const visits = data.visitChartTableData
                                .filter(visit => visit.doctorCode === doctor.id)
                                .map(visit => ({
                                    date: visit.adate,
                                    time: visit.timeCall,
                                    jukudo: visit.jukudoStep,
                                    prodId: visit.prodId,
                                    prodDesc: visit.prodDesc,
                                    visitQuality: visit.visitQuality,
                                    notes: visit.anotes,
                                    practice: visit.practiceName,
                                    address: visit.address,
                                    planVisit: visit.planVisit
                                }));

                            return {
                                id: doctor.id,
                                name: doctor.doctorName,
                                class: doctor.class,
                                targetVisit: doctor.targetVisit,
                                plannedVisit: doctor.plannedVisit,
                                unplannedVisit: doctor.unplannedVisit,
                                visited: doctor.visited,
                                progress: `${doctor.progress}%`,
                                needToVisit: doctor.needToVisit,
                                visitHistory: visits.length > 0 ? visits : []
                            };
                        });

                        // Memfilter dokter yang memiliki needToVisit sama dengan 0
                        const doctorsCompleted = data.mclTableData
                            .filter(doctor => doctor.needToVisit === 0)
                            .map(doctor => {
                                const visits = data.visitChartTableData
                                    .filter(visit => visit.doctorCode === doctor.id)
                                    .map(visit => ({
                                        date: visit.adate,
                                        time: visit.timeCall,
                                        jukudo: visit.jukudoStep,
                                        prodId: visit.prodId,
                                        prodDesc: visit.prodDesc,
                                        visitQuality: visit.visitQuality,
                                        notes: visit.anotes,
                                        practice: visit.practiceName,
                                        address: visit.address,
                                        planVisit: visit.planVisit
                                    }));

                                return {
                                    id: doctor.id,
                                    name: doctor.doctorName,
                                    class: doctor.class,
                                    targetVisit: doctor.targetVisit,
                                    plannedVisit: doctor.plannedVisit,
                                    unplannedVisit: doctor.unplannedVisit,
                                    visited: doctor.visited,
                                    progress: `${doctor.progress}%`,
                                    needToVisit: doctor.needToVisit,
                                    visitHistory: visits.length > 0 ? visits : []
                                };
                            });

                        // Memfilter dokter yang memiliki needToVisit sama dengan 0
                        const doctorsProgress = data.mclTableData
                            .filter(doctor => doctor.progress > 0 && doctor.progress < 100)
                            .map(doctor => {
                                const visits = data.visitChartTableData
                                    .filter(visit => visit.doctorCode === doctor.id)
                                    .map(visit => ({
                                        date: visit.adate,
                                        time: visit.timeCall,
                                        jukudo: visit.jukudoStep,
                                        prodId: visit.prodId,
                                        prodDesc: visit.prodDesc,
                                        visitQuality: visit.visitQuality,
                                        notes: visit.anotes,
                                        practice: visit.practiceName,
                                        address: visit.address,
                                        planVisit: visit.planVisit
                                    }));

                                return {
                                    id: doctor.id,
                                    name: doctor.doctorName,
                                    class: doctor.class,
                                    targetVisit: doctor.targetVisit,
                                    plannedVisit: doctor.plannedVisit,
                                    unplannedVisit: doctor.unplannedVisit,
                                    visited: doctor.visited,
                                    progress: `${doctor.progress}%`,
                                    needToVisit: doctor.needToVisit,
                                    visitHistory: visits.length > 0 ? visits : []
                                };
                            });

                        const doctorsUnvisited = data.mclTableData
                            .filter(doctor => doctor.visited === 0)
                            .map(doctor => {
                                const visits = data.visitChartTableData
                                    .filter(visit => visit.doctorCode === doctor.id)
                                    .map(visit => ({
                                        date: visit.adate,
                                        time: visit.timeCall,
                                        jukudo: visit.jukudoStep,
                                        prodId: visit.prodId,
                                        prodDesc: visit.prodDesc,
                                        visitQuality: visit.visitQuality,
                                        notes: visit.anotes,
                                        practice: visit.practiceName,
                                        address: visit.address,
                                        planVisit: visit.planVisit
                                    }));

                                return {
                                    id: doctor.id,
                                    name: doctor.doctorName,
                                    class: doctor.class,
                                    targetVisit: doctor.targetVisit,
                                    plannedVisit: doctor.plannedVisit,
                                    unplannedVisit: doctor.unplannedVisit,
                                    visited: doctor.visited,
                                    progress: `${doctor.progress}%`,
                                    needToVisit: doctor.needToVisit,
                                    visitHistory: visits.length > 0 ? visits : []
                                };
                            });

                        const TableAllDoctor = $('#TableAllDoctor');
                        const TableCompletedDoctor = $('#TableCompletedDoctor');
                        const TableProgressDoctor = $('#TableProgressDoctor');
                        const TableUnvisitedDoctor = $('#TableUnvisitedDoctor');

                        // Update DataTable
                        if ($.fn.DataTable.isDataTable('#TableAllDoctor')) {
                            TableAllDoctor.DataTable().clear().destroy();
                        }

                        // Update DataTable
                        if ($.fn.DataTable.isDataTable('#TableCompletedDoctor')) {
                            TableCompletedDoctor.DataTable().clear().destroy();
                        }

                        // Update DataTable
                        if ($.fn.DataTable.isDataTable('#TableProgressDoctor')) {
                            TableProgressDoctor.DataTable().clear().destroy();
                        }

                        // Update DataTable
                        if ($.fn.DataTable.isDataTable('#TableUnvisitedDoctor')) {
                            TableUnvisitedDoctor.DataTable().clear().destroy();
                        }

                        // Function untuk mendapatkan label kualitas kunjungan
                        function getVisitQualityLabel(quality) {
                            switch (quality) {
                                case '5':
                                    return "A - Prescription Req, Intro Prod ";
                                case '4':
                                    return "B - Chatting";
                                case '3':
                                    return "C - Greeting Only";
                                default:
                                    return "N/A"; // Jika kualitas tidak diketahui
                            }
                        }

                        // Function untuk mendapatkan label rencana kunjungan
                        function getVisitPlanLabel(plan) {
                            switch (plan) {
                                case '0':
                                    return "Unplanned";
                                case '1':
                                    return "Planned";
                                default:
                                    return "N/A"; // Jika rencana tidak diketahui
                            }
                        }

                        // Formatting function for row details
                        function format(d) {
                            let visitDetails = '';
                            // Mengecek apakah visitHistory ada dan memiliki data
                            if (!d.visitHistory || d.visitHistory.length === 0) {
                                visitDetails = '<tr><td colspan="10" class="text-center">No Visit History Data Available</td></tr>';
                            } else {
                                // Format data jika ada
                                visitDetails = d.visitHistory.map(visit => `
                                <tr>
                                    <td>${visit.date}</td>
                                    <td>${visit.time}</td>
                                    <td>${visit.jukudo}</td>
                                    <td>${visit.prodId}</td>
                                    <td>${visit.prodDesc}</td>
                                    <td>${getVisitQualityLabel(visit.visitQuality)}</td>
                                    <td>${getVisitPlanLabel(visit.planVisit)}</td>
                                    <td>${visit.notes}</td>
                                    <td>${visit.practice}</td>
                                    <td>${visit.address}</td>
                                </tr>
                            `).join('');
                            }

                            // Kembalikan struktur HTML dengan header
                            return (
                                '<div class="card">' +
                                '<div class="card-header">' +
                                '<h6 class="card-title">Visit History</h6>' +
                                '</div>' +
                                '<div class="card-body">' +
                                '<table class="table table-bordered">' +
                                '<thead>' +
                                '<tr>' +
                                '<th>Date</th>' +
                                '<th>Time</th>' +
                                '<th>Jukudo</th>' +
                                '<th>Prod ID</th>' +
                                '<th>Prod Desc</th>' +
                                '<th>Visit Quality</th>' +
                                '<th>Visit Plan</th>' +
                                '<th>Notes</th>' +
                                '<th>Practice</th>' +
                                '<th>Address</th>' +
                                '</tr>' +
                                '</thead>' +
                                '<tbody>' +
                                visitDetails +
                                '</tbody>' +
                                '</table>' +
                                '</div>' +
                                '</div>'
                            );
                        }


                        // Membuat DataTable
                        var table = $('#TableAllDoctor').DataTable({
                            data: doctors.map(doctor => ({
                                id: doctor.id,
                                name: doctor.name,
                                class: doctor.class,
                                targetVisit: doctor.targetVisit,
                                plannedVisit: doctor.plannedVisit,
                                unplannedVisit: doctor.unplannedVisit,
                                visited: doctor.visited,
                                progress: doctor.progress,
                                remarks: doctor.needToVisit === 0 ? "Target Tercapai" : doctor.needToVisit + " Kali Visit Lagi",
                                visitHistory: doctor.visitHistory // Menyimpan history kunjungan
                            })),
                            columns: [
                                {
                                    className: 'dt-control',
                                    orderable: false,
                                    data: null,
                                    defaultContent: ''
                                },
                                { data: 'id'},
                                { data: 'name'},
                                { data: 'class'},
                                { data: 'targetVisit'},
                                { data: 'plannedVisit'},
                                { data: 'unplannedVisit'},
                                { data: 'visited'},
                                { data: 'progress'},
                                { data: 'remarks'}
                            ],
                            order: [[3, 'asc']],
                            autoWidth: false, // Matikan autoWidth jika ingin kontrol penuh
                            scrollX: true // Mengaktifkan scroll horizontal jika tabel lebih lebar dari kontainer
                        });

                        $('#TableAllDoctor tbody').on('click', 'td.dt-control', function () {
                            event.stopPropagation();
                            let tr = $(this).closest('tr');
                            let row = table.row(tr);

                            if (row.child.isShown()) {
                                row.child.hide();
                                tr.removeClass('shown');
                            } else {
                                const rowData = row.data(); // Ambil data dari row
                                if (rowData !== undefined) {
                                    row.child(format(rowData)).show(); // Panggil format dengan rowData yang valid
                                    tr.addClass('shown'); // Tambahkan class 'shown'
                                }
                            }
                        });

                        // Membuat DataTable
                        var tableCompleted = $('#TableCompletedDoctor').DataTable({
                            data: doctorsCompleted.map(doctor => ({
                                id: doctor.id,
                                name: doctor.name,
                                class: doctor.class,
                                targetVisit: doctor.targetVisit,
                                plannedVisit: doctor.plannedVisit,
                                unplannedVisit: doctor.unplannedVisit,
                                visited: doctor.visited,
                                progress: doctor.progress,
                                remarks: doctor.needToVisit === 0 ? "Target Tercapai" : doctor.needToVisit + " Kali Visit Lagi",
                                visitHistory: doctor.visitHistory // Menyimpan history kunjungan
                            })),
                            columns: [
                                {
                                    className: 'dt-control',
                                    orderable: false,
                                    data: null,
                                    defaultContent: ''
                                },
                                { data: 'id' },
                                { data: 'name' },
                                { data: 'class' },
                                { data: 'targetVisit' },
                                { data: 'plannedVisit' },
                                { data: 'unplannedVisit' },
                                { data: 'visited' },
                                { data: 'progress' },
                                { data: 'remarks' }
                            ],
                            order: [[3, 'asc']],
                            autoWidth: false, // Matikan autoWidth jika ingin kontrol penuh
                            scrollX: true // Mengaktifkan scroll horizontal jika tabel lebih lebar dari kontainer
                        });

                        $('#TableCompletedDoctor tbody').on('click', 'td.dt-control', function () {
                            event.stopPropagation();
                            let tr = $(this).closest('tr');
                            let row = tableCompleted.row(tr);

                            if (row.child.isShown()) {
                                row.child.hide();
                                tr.removeClass('shown');
                            } else {
                                const rowData = row.data(); // Ambil data dari row
                                if (rowData !== undefined) {
                                    row.child(format(rowData)).show(); // Panggil format dengan rowData yang valid
                                    tr.addClass('shown'); // Tambahkan class 'shown'
                                }
                            }
                        });

                        // Membuat DataTable
                        var tableProgress = $('#TableProgressDoctor').DataTable({
                            data: doctorsProgress.map(doctor => ({
                                id: doctor.id,
                                name: doctor.name,
                                class: doctor.class,
                                targetVisit: doctor.targetVisit,
                                plannedVisit: doctor.plannedVisit,
                                unplannedVisit: doctor.unplannedVisit,
                                visited: doctor.visited,
                                progress: doctor.progress,
                                remarks: doctor.needToVisit === 0 ? "Target Tercapai" : doctor.needToVisit + " Kali Visit Lagi",
                                visitHistory: doctor.visitHistory // Menyimpan history kunjungan
                            })),
                            columns: [
                                {
                                    className: 'dt-control',
                                    orderable: false,
                                    data: null,
                                    defaultContent: ''
                                },
                                { data: 'id' },
                                { data: 'name' },
                                { data: 'class' },
                                { data: 'targetVisit' },
                                { data: 'plannedVisit' },
                                { data: 'unplannedVisit' },
                                { data: 'visited' },
                                { data: 'progress' },
                                { data: 'remarks' }
                            ],
                            order: [[3, 'asc']],
                            autoWidth: false, // Matikan autoWidth jika ingin kontrol penuh
                            scrollX: true // Mengaktifkan scroll horizontal jika tabel lebih lebar dari kontainer
                        });

                        $('#TableProgressDoctor tbody').on('click', 'td.dt-control', function () {
                            event.stopPropagation();
                            let tr = $(this).closest('tr');
                            let row = tableProgress.row(tr);

                            if (row.child.isShown()) {
                                row.child.hide();
                                tr.removeClass('shown');
                            } else {
                                const rowData = row.data(); // Ambil data dari row
                                if (rowData !== undefined) {
                                    row.child(format(rowData)).show(); // Panggil format dengan rowData yang valid
                                    tr.addClass('shown'); // Tambahkan class 'shown'
                                }
                            }
                        });

                        // Membuat DataTable
                        var tableUnvisited = $('#TableUnvisitedDoctor').DataTable({
                            data: doctorsUnvisited.map(doctor => ({
                                id: doctor.id,
                                name: doctor.name,
                                class: doctor.class,
                                targetVisit: doctor.targetVisit,
                                plannedVisit: doctor.plannedVisit,
                                unplannedVisit: doctor.unplannedVisit,
                                visited: doctor.visited,
                                progress: doctor.progress,
                                remarks: doctor.needToVisit === 0 ? "Target Tercapai" : doctor.needToVisit + " Kali Visit Lagi",
                                visitHistory: doctor.visitHistory // Menyimpan history kunjungan
                            })),
                            columns: [
                                {
                                    className: 'dt-control',
                                    orderable: false,
                                    data: null,
                                    defaultContent: ''
                                },
                                { data: 'id' },
                                { data: 'name' },
                                { data: 'class' },
                                { data: 'targetVisit' },
                                { data: 'plannedVisit' },
                                { data: 'unplannedVisit' },
                                { data: 'visited' },
                                { data: 'progress' },
                                { data: 'remarks' }
                            ],
                            order: [[3, 'asc']],
                            autoWidth: false, // Matikan autoWidth jika ingin kontrol penuh
                            scrollX: true // Mengaktifkan scroll horizontal jika tabel lebih lebar dari kontainer
                        });

                        $('#TableUnvisitedDoctor tbody').on('click', 'td.dt-control', function () {
                            event.stopPropagation();
                            let tr = $(this).closest('tr');
                            let row = tableUnvisited.row(tr);

                            if (row.child.isShown()) {
                                row.child.hide();
                                tr.removeClass('shown');
                            } else {
                                const rowData = row.data(); // Ambil data dari row
                                if (rowData !== undefined) {
                                    row.child(format(rowData)).show(); // Panggil format dengan rowData yang valid
                                    tr.addClass('shown'); // Tambahkan class 'shown'
                                }
                            }
                        });

                    },
                    error: function () {
                        console.error("Error fetching data.");
                        Swal.fire({
                            title: 'Error!',
                            text: 'Terjadi kesalahan saat mengambil data.',
                            icon: 'error',
                            showConfirmButton: true
                        });
                    }
                });
            }

            // Menambahkan event listener pada semua tombol setelah DOM siap
            document.addEventListener("DOMContentLoaded", function () {
                const buttonIds = ['button-all', 'button-completed', 'button-progress', 'button-unvisited', 'button-history'];

                buttonIds.forEach(id => {
                    const button = document.getElementById(id);
                    button.addEventListener('click', function () {
                        toggleButtons(id);
                    });
                });
            });

            // Menambahkan event listener pada semua tombol setelah DOM siap
            document.addEventListener("DOMContentLoaded", function () {
                const buttonIds = [
                    'button-all',
                    'button-completed',
                    'button-progress',
                    'button-unvisited',
                    'button-history'
                ];

                buttonIds.forEach(id => {
                    const button = document.getElementById(id);
                    button.addEventListener('click', function () {
                        toggleButtons(id);
                    });
                });
            });

            function toggleButtons(selectedId) {
                // Mengambil semua tombol berdasarkan ID
                const buttonIds = [
                    'button-all',
                    'button-completed',
                    'button-progress',
                    'button-unvisited',
                    'button-history'
                ];

                buttonIds.forEach(id => {
                    const button = document.getElementById(id);
                    // Menonaktifkan semua tombol dan mengubah kelasnya
                    button.disabled = true;
                    button.classList.remove('btn-primary');
                    button.classList.add('btn-outline-primary');
                });

                // Mengaktifkan tombol yang dipilih
                const selectedButton = document.getElementById(selectedId);
                selectedButton.disabled = false;
                selectedButton.classList.remove('btn-outline-primary');
                selectedButton.classList.add('btn-primary');
            }

            visitMonthInput.addEventListener('change', function () {
                updateDataVisit(savedSelection);
            });

        });

        // Menambahkan event listener pada semua tombol setelah DOM siap
        document.addEventListener("DOMContentLoaded", function () {
            const buttonIds = [
                'button-all',
                'button-completed',
                'button-progress',
                'button-unvisited',
                'button-history'
            ];

            buttonIds.forEach(id => {
                const button = document.getElementById(id);
                button.addEventListener('click', function () {
                    toggleButtons(id);
                });
            });
        });

        function toggleButtons(selectedId) {
            // Mengambil semua tombol berdasarkan ID
            const buttonIds = [
                'button-all',
                'button-completed',
                'button-progress',
                'button-unvisited',
                'button-history'
            ];

            buttonIds.forEach(id => {
                const button = document.getElementById(id);
                // Menonaktifkan semua tombol dan mengubah kelasnya
                button.classList.remove('btn-primary');
                button.classList.add('btn-outline-primary');
            });

            // Mengaktifkan tombol yang dipilih
            const selectedButton = document.getElementById(selectedId);
            selectedButton.classList.remove('btn-outline-primary');
            selectedButton.classList.add('btn-primary');
        }

        // Fungsi untuk menampilkan card yang sesuai dan menyembunyikan card lainnya
        function showCard(selectedCardId) {
            // Array berisi semua ID card
            const cardIds = [
                'card-all',
                'card-completed',
                'card-progress',
                'card-unvisited',
                'card-history'
            ];

            // Loop untuk menyembunyikan semua card
            cardIds.forEach(cardId => {
                const card = document.getElementById(cardId);
                card.style.display = 'none'; // Sembunyikan card
            });

            // Tampilkan card yang dipilih
            const selectedCard = document.getElementById(selectedCardId);
            selectedCard.style.display = 'block'; // Tampilkan card yang sesuai
        }

        // Event listener pada setiap tombol
        document.getElementById('button-all').addEventListener('click', () => {
            toggleButtons('button-all');
            showCard('card-all');
        });

        document.getElementById('button-completed').addEventListener('click', () => {
            toggleButtons('button-completed');
            showCard('card-completed');
        });

        document.getElementById('button-progress').addEventListener('click', () => {
            toggleButtons('button-progress');
            showCard('card-progress');
        });

        document.getElementById('button-unvisited').addEventListener('click', () => {
            toggleButtons('button-unvisited');
            showCard('card-unvisited');
        });

        document.getElementById('button-history').addEventListener('click', () => {
            toggleButtons('button-history');
            showCard('card-history');
        });

        document.addEventListener('DOMContentLoaded', function () {
            // Simulasikan klik tombol "All"
            toggleButtons('button-all');
            showCard('card-all');
        });

    </script>

</body>

</html>
